HTTP
웹 클라이언트와 웹 서버 간에 HTML문서와 같은 리소스들을 전송
링크를 통해 연결할 수 있으며 가져올수 있는 프로토콜
HTML이나 TEXT, 이미지, 음성, 영상, 파일, JSON, XML(API) 등 여러 종류의 데이터들을 폭 넓게 전송할 수 있다.

특징은 
HTTP 클라이언트와 HTTP서버에 의해서 해석이 되며
비연결성과 무상태성이고
요청/응답 방식으로 동작한다
TCP/IP를 이용하는 응용 프로토콜

-----------------------------------------------------------------------------------------------------

HTTP요청/응답
클라이언트가 HTTP 요청을 서버에 보내면 서버는 HTTP 응답을 보내는 구조
요청의 구조는 각각 Start Line, Headers, Body가 있습니다
Start Line은 3가지 부분으로 구성됩니다
HTTP method - 클라이언트가 서버에게 어떤 종류의 동작을 원하는지 나타내는 방법입니다.
HTTP method는 8개가 있으며 각각
- get: 리소스를 조회라는 메서드이며 여러번 요청해도 리소스는 변하지 않고 리소스를 읽는 데만 사용됩니다(멱등성)
- post: 주로 서버에 리소스를 생성할 때 그리고 양식(form) 데이터나 JSON 같은 정보를 전달하고 처리할 때 사용합니다
- put: 특정 URL에 대응하는 리소스의 전체 내용을 갱신하는데 사용합니다
특정 URL에 리소스가 있다면 새로운 것으로 대체하고 아니라면 새로운 리소스를 생성합니다
- patch: 리소스의 일부 부분을 변경하는 메서드입니다 put과는 다르게 일정 부분만 수정합니다.
- delete: 특정 리소스를 제거하는데 사용됩니다
- head: get요청과 거의 유사하지만 HTTP헤더 정보만 반환합니다(응답에 body부분이 없다)
- options: 리소스가 지원하는 메서드의 종류를 확인 하는데 사용합니다
- trace: 클라이언트가 요청한 자원에 도달하기 까지의 경로를 기록하는 루프 백 검사용
Request target:HTTP Request가 전송되는 목표 주소입니다.
HTTP version:버젼을 명시하는 부분입니다

headers:서버한테 요청을 보낼때 설정을 담아서 보내는 장소입니다. Key:Value 형태로 구성되어 있습니다.
대표적인 키-값들
:authority:요청한 리소스의 권한(authority)
:method: HTTP 요청 메서드를 나타내는 헤더 필드
:path: HTTP 요청 URI를 나타내는 헤더 필드입니다
cookie: HTTP 요청에서 사용되는 헤더 필드 중 하나
accept: 클라이언트가 처리 가능한 콘텐츠 타입을 나타내는 헤더 필드
Authorization: 인증 정보를 서버로 보낼 때 쓰이는 헤더 필드

body(본문):POST, PUT 요청과 같이 요청과 함께 전달되는 데이터를 포함하며
요청과 함께 전달되는 데이터가 없을 경우 Body가 없을 수도 있습니다

---------------------------------------------------------------------------------------------

응답의 구조 또한 3가지로 이루어져 있습니다(Status Line, Headers, Body)
Status Line: 응답의 상태를 간략하게 나타내주는 부분 3가지로 구성되어 있으며
각각 HTTP version, Status Code, Status Text 이 있습니다
headers: 요청의 headers와 동일하지만 응답에만 사용되는 값들이 있습니다
body: 서버가 클라이언트에게 실제로 전달하려는 데이터를 담는 공간.

----------------------------------------------------------------------------------------------

HTTP의 상태 코드
1XX: Informational(정보 제공)
임시 응답으로 현재 클라이언트의 요청까지는 처리되었으니 계속 진행하라는 의미
2XX: Success(성공)
클라이언트의 요청이 서버에서 성공적으로 처리되었다는 의미입니다.
3XX: Redirection(리다이렉션)
완전한 처리를 위해서 추가 동작이 필요한 경우
4XX: Client Error(클라이언트 에러)
없는 페이지를 요청하는 등 클라이언트의 요청 메시지 내용이 잘못된 경우를 의미합니다.
5XX: Server Error(서버 에러)
서버 사정으로 메시지 처리에 문제가 발생한 경우입니다.
서버의 부하, DB 처리 과정 오류, 서버에서 익셉션이 발생하는 경우를 의미합니다.

---------------------------------------------------------------------------------------------

HTTPS란
HTTP가 전송하는 데이터가 암호화되지 않은 부분을 보완한 프로토콜입니다.
TLS Handshake를 사용하여 통신을 암호화합니다
TLS Handshake는 데이터를 주고 받기 전, 서버의 무결성을 확인하고 대칭키를 전달하는 과정

--------------------------------------------------------------------------------------------

TCP란
애플리케이션 사이에서 안전하게 데이터를 통신하는 규약
- 연결형 서비스를 제공
- 전이중 방식의 양방향 가상 회선을 이용
- 신뢰성 있는 데이터 전송을 보장함

SSL(Secure Sockets Layer)은 암호화 기반 인터넷 보안 프로토콜이며
TLS는 인터넷 상의 커뮤니케이션을 위한 개인 정보와 데이터 보안을 위해 설계되었고 널리 채택된 보안 프로토콜
TLS의 역할
-암호화 : 제3자로부터 전송되는 데이터를 숨긴다.
- 인증 : 정보를 교환하는 당사자가 요청된 당사자임을 보장한다.
- 무결성 : 데이터가 위조되거나 변조되지 않았는지 확인한다.

TLS handshake
- 클라이언트 헬로: 클라이언트가 서버로 "헬로" 메시지를 전송하면서 핸드셰이크를 개시
이 메시지는 클라이언트가 지원하는 TLS 버전, 암호 방식, 무작위 바이트 문자열이 포함
- 서버 헬로: 서버가 인증서, 암호 방식 선택, 랜덤 바이트 문자열 전송
- 인증: 클라이언트가 서버 인증서 진짜인지 인증서 발행 기관을 통해 검증
- 예비 마스터 암호: 클라이언트가 무작위 바이트 문자열을 하나 더 전송
예비 마스터 암호는 공개 키로 암호화되어 있으며, 서버가 개인 키로만 해독할 수 있음
- 개인 키 사용: 서버가 예비 마스터 암호를 해독
- 세션 키 생성: 클라이언트와 서버가 모두 클라이언트 무작위, 서버 무작위, 예비 마스터 암호를 이용해 세션 키를 생성
단 모두 같은 결과가 나와야 합니다.
- 클라이언트 준비 완료: 클라이언트가 세션 키로 암호화된 "완료" 메시지를 전송합니다.
- 서버 준비 완료: 서버가 세션 키로 암호화된 "완료" 메시지를 전송합니다.
- 안전한 대칭 암호화 성공: 핸드셰이크가 완료되고, 세션 키를 이용해 통신이 계속 진행됩니다.
------------------------------------------------------------------------------------------------------



Cron이란
특정한 시간 마다 작업을 자도으로 실행시켜주는
유닉스 계열 컴퓨터 운영 체제의 시간 기반 잡 스케줄러이다

Crontap이란
스케줄링을 관리하는 프로그램
Crontab명령어
crontab -l: 크론탭에 예약된 리스트를 볼 수 있습니다.
crontab -e: 예약 작업 등록 및 수정하기
crontab -r: 예약된 작업 삭제하기

--------------------------------------------------------------------------------------
Restful API


----------------------------------------------------------------------------------------

출처
https://seunghyun90.tistory.com/41
https://developing-move.tistory.com/256#google_vignette
https://www.lenovo.com/kr/ko/glossary/hypertext-transfer-protocol/?orgRef=https%253A%252F%252Fwww.google.com%252F&srsltid=AfmBOooVVTQObOl1NtW42FL2rw5pXGDX-wVV7SFJwlFy4k-UrxTA7o_D
https://www.devkobe24.com/Network/2024/2024-10-11-what-is-the-http-protocol.html
https://testmanager.tistory.com/346
https://bruders.tistory.com/143
https://engineerinsight.tistory.com/47#google_vignette
https://hahahoho5915.tistory.com/62#google_vignette
https://somaz.tistory.com/236
https://kagrin97-blog.vercel.app/other/Http-headers
https://hongong.hanbit.co.kr/http-%EC%83%81%ED%83%9C-%EC%BD%94%EB%93%9C-%ED%91%9C-1xx-5xx-%EC%A0%84%EC%B2%B4-%EC%9A%94%EC%95%BD-%EC%A0%95%EB%A6%AC/
https://www.cloudflare.com/ko-kr/learning/ssl/what-happens-in-a-tls-handshake/
https://sunrise-min.tistory.com/entry/TLS-Handshake%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A7%84%ED%96%89%EB%90%98%EB%8A%94%EA%B0%80
https://co-meow.tistory.com/entry/Linux-Cron%ED%81%AC%EB%A1%A0%EC%9D%B4%EB%9E%80
https://codinghero.tistory.com/61#google_vignette
